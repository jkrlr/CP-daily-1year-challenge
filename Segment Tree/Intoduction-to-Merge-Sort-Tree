What is Merge Sort Tree & why we need it 

Before explaining whia is merge sort tree let's see some of the problems,
where segment tree may not be helpful.

---------------------------------------------------------------------------------------------
Problem : 1
            Given an array of size N and Q queries of form L R K, find the number of elements
            in the range L to R which are strictly smaller than K.

Array : 1 4 3 5 6 4 3 2 1

Query   1 5 4
Answer  2

Query   7 10 4
Answer  3 

Problem : 2
            Given an array of size N and Q queries of form L R, find the number of unique elements
            in the range L to R.

---------------------------------------------------------------------------------------------
-> Problems that can be solved using Merge Sort Tree.

https://www.hackerrank.com/challenges/coloring-tree/problem
https://codeforces.com/problemset/problem/893/F

---------------------------------------------------------------------------------------------
-> Merge Sort Tree : Answering queries

                                {1, 2, 3, 4, 4, 5, 6}
                                    /           \
                             {1, 3, 4, 5}     {2, 3, 4, 6}
                                /   \            /    \
                            {1, 4} {3, 5}     {4, 6}  {2, 3}
                            /  \    /  \       /  \    /  \
                           {1} {4} {3} {5}    {6} {4} {3} {2}
                          
---------------------------------------------------------------------------------------------
-> Merge Sort Tree : Implementation

#include<bits/stdc++.h>
#define REP(i,n) for (int i = 1; i <= n; i++)
#define mod 1000000007
#define pb push_back
#define ii pair<int,int>
#define vi vector<int>
#define vii vector<ii>
#define lli long long int
#define INF 1000000000
#define endl '\n'
const double PI = 3.141592653589793238460;
typedef std::complex<double> Complex;
typedef std::valarray<Complex> CArray;
 
using namespace std;
#define maxN 1000

vi st[4*maxN];
int ar[maxN];

void build(int si, int ss, int se){
    if(ss==se){
        st[si].pb(ar[ss]);
        return;
    }

    int mid = (se-ss)/2 + ss;

    build(2*si, ss, mid);
    build(2*si+1, mid+1, se);

    int i=0, j=0;

    while(i<st[2*si].size() && j<st[2*si+1].size()){
        if(st[2*si][i]<=st[2*si+1][j])
            st[si].pb(st[2*si][i]), i++;
        else
            st[si].pb(st[2*si+1][j]), j++;
    }

    while(i<st[2*si].size())
        st[si].pb(st[2*si][i]), i++;

    while(j<st[2*si+1].size())
        st[si].pb(st[2*si+1][j]), j++;
}

int query(int si, int ss, int se, int qs, int qe, int k){
    if(ss>qe || se<qs)
        return 0;
    
    if(ss>=qs && se<=qe){
        int res = upper_bound(st[si].begin(), st[si].end(), k-1) - st[si].begin();
        return res;
    }

    int mid = (ss+se)/2;
    int l = query(2*si, ss, mid, qs, qe, k);
    int r = query(2*si+1, mid+1, se, qs, qe,k);

    return l+r;
}

int main(){

    int n,q,l,r,k;
    cin>>n>>q;
    
    for(int i=1;i<=n;i++)
        cin>>ar[i];
    
    build(1,1,n);

    while(q--){
        cin>>l>>r>>k;
        cout<<query(1,1,n,l,r,k)<<endl;
    }

    return 0;
}