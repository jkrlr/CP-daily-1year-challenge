=> Permutation & Cost of ith Cyclic Shift

Problems on this Concept:

https://codeforces.com/problemset/problem/1365/C
https://www.hackerearth.com/practice/algorithms/dynamic-programming/introduction-to-dynamic-programming-1/practice-problems/algorithm/shift-and-replace-d96fc236/
https://codeforces.com/problemset/problem/1294/E

--------------------------------------------------------------------
-> What is cost of ith cycle Shift
   Input Array : 4 2 1 3 5

After 2 Right Cyclic Shift                  1 2 3 4 5
Output : 3 5 4 2 1                          3 5 4 2 1
                                            Cost : 5

--------------------------------------------------------------------
After 3 Right Cyclic Shift                  1 2 3 4 5
Output : 1 3 5 4 2                          1 3 5 4 2
                                            Cost : 3

----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------
-> Calculating the Cost of ith Shift

Problem Statement :

Given a permutation of length N(permutation of length N means each element is unique) and Q Queries,
In each query you will be given an integer K, 
Find the cost of Kth Cyclic Shift

Constraints :
                N<=10^5
                Q<=10^5
                K<=10^18

In this prob. we are talking about right cyclic shift but the approach and result 
are same for left and right shift both.

----------------------------------------------------------------------------------------------------------------------------------------
-> Important Observation :

For a permutation of length N, there exists only N unique permutations after cyclic shift.
                                    OR
Permutation after Kth cyclic shift = (K % N)th cyclic shift

0th cyclic shift : 2 4 1 3 5
1st cyclic shift : 5 2 4 1 3
2nd cyclic shift : 3 5 2 4 1 
3rd cyclic shift : 1 3 5 2 4
4th cyclic shift : 4 1 3 5 2
5th cyclic shift : 2 4 1 3 5

----------------------------------------------------------------------------------------------------------------------------------------
-> Naive Approach :

Let's find the cos of ith right cyclic shift using Naive Approach

                             Cost                                   void calculate(int N){
0th cyclic shift : 2 4 1 3 5 (3)                                        for(int i=0;i<N;i++){
1st cyclic shift : 5 2 4 1 3 (4)                                            int cnt =0;
2nd cyclic shift : 3 5 2 4 1 (3)                                            for(int j=1;j<=N;j++){
3rd cyclic shift : 1 3 5 2 4 (5)                                                if(ar[j]!=j)
4th cyclic shift : 4 1 3 5 2 (5)                                                    cnt++;
5th cyclic shift : 2 4 1 3 5 (3)
                                                                                cost[i] = cnt;
                                                                                rightShift(N);
                                                                            }
                                                                        }
                                                                    }

----------------------------------------------------------------------------------------------------------------------------------------
-> Understanding it better :

0th cyclic shift : 2 4 3 1 5
1st cyclic shift : 5 2 4 3 1 (2 is on its correct position after 1 right cyclic shift)

Question : find one more right cyclic shift on which 2 is on it's correct position

It turns out that, an element is on it's correct position in only 1 of the Nth cyclic shifts.
(Because we've given permutation of N numbers means n different numbers)

----------------------------------------------------------------------------------------------------------------------------------------
-> Designing a better algorithm :

If in the ith cyclic shift, k elements are on their correct positions, then cost = N-k

Hence to minimize cost, we need to maximize k 

0th cyclic shift : 2 4 1 3 5                                        
                   1 2 0 2 0 <-No. of right shifts required to reach the given elemnt a correct position
                                                                   

=> For element j, the no. of cyclic shift needed to reach at it's correct position = (j-pos[j]+N)%N

                                                                                                                                Cost                                   
                                                                                                    0th cyclic shift : 2 4 1 3 5 (3)                                        
                                                                                                    1st cyclic shift : 5 2 4 1 3 (4)                                           
                                                                                                    2nd cyclic shift : 3 5 2 4 1 (3)                                            
                                                                                                    3rd cyclic shift : 1 3 5 2 4 (5)                                                
                                                                                                    4th cyclic shift : 4 1 3 5 2 (5)                                          
                                                                                                    5th cyclic shift : 2 4 1 3 5 (3)

For getting the required ans, we have to find the maximum frequency of element(value of k) of array formed by
(No. of right shifts required to reach the given elemnt a correct position -> frequencies)