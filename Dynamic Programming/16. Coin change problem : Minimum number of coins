a) Problem Statement : https://leetcode.com/problems/coin-change/
    coin [] : {1, 2, 3}
    sum     : 5 
    Output  : 2 (2 + 3 = 5)

    Explaination : by total no. of ways with sum = 5
                    2 + 3 = 5  => minCoins = 2 which is this case
                1 + 2 + 2 = 5
                1 + 1 + 3 = 5
            1 + 1 + 1 + 2 = 5
        1 + 1 + 1 + 1 + 1 = 5
    
    Unbounded Knapsack type Problem.

-------------------------------------------------------------------------------------------------------
b) Initialization :
    wt[] <--> coin []
       W <--> sum  
    => t[n+1][w+1] <--> t[n(size of coin[])+1][sum+1]

    In all other question we've to Initialize first row and first column only.
    But in this question apart from 1st row and 1st column we've to Initialize 2nd row also.

    ---------------------------------------------------------------------------------------------------
    for j-> 0 to sum:
            t[0][j] = INT_MAX - 1  
            Because, In this case coin[] = { }(empty) and only sum is given to change.
            Due to unavailability of coins we have required inifinite no. of coins(mathematically).
            But logically this is wrong ques.
            For the case t[0][0] the same case is valid.

    for i-> 1 to n:
            t[i][0] = 0
            Because, In this case only coins given but sum = 0 for change the coins.
            So, we required 0 coin to change the sum, when coins are given.

    ---------------------------------------------------------------------------------------------------
    Now, come to the Initialization of 2nd row...
        e.g. coin[] = {[3], 5, 2}
             Let's assume for the second row in the table i.e. size of coin[] is 1.
             and for the above coin[] we've only 3 is present in size 1
             Then, If in ques sum = 4 is given, Then we can't make sum to be 4 with
             the help of any no. of 3 denomination coins.
             So, ans for this case would be inifinite => we'll fill INT_MAX-1 in the second row of that column.

             In the second case if the size of coin[] is 1 given i.e. only 3 is present
             and sum = 3 or multile of 3 is given, Then the ans for this case is 1 or
             more precisely it would be sum/coin[i]  i.e. in the case of table it would be j/i.

        Hence, we'll also Initialize the 2nd row in the following manner...

        for(int i = 1, j = 1; j<=sum; j++){
            if(j%coin[0] == 0)
                t[i][j] = j/coin[0];
            else
                t[i][j] = INT_MAX - 1 ;
        }

-------------------------------------------------------------------------------------------------------
c) Code Variation : from Unbounded Knapsack
    for(int i=2 ;i<=n;i++){
        for(int j=1;j<=sum;j++){
            if(coin[i-1]<=j)
                t[i][j] = min(1 + t[i][j-coin[i-1]], 0 + t[i-1][j]); // added 1 insted of val[], Because if we include the coin, Then cnt is increased by 1.
            else
                t[i][j] = 0 + t[i-1][j];
        }
    }

-------------------------------------------------------------------------------------------------------
Why we are Initializing with INT_MAX-1 insted of INT_MAX?
    Because in the code => t[i][j] = min(1 + t[i][j-coin[i-1]], 0 + t[i-1][j]);
    We're adding +1 => Then after addition the value becomes INT_MAX.
    i.e. the maximum value we can store into an integer.

    If we use INT_MAX. Then INT_MAX+1 => causes overflow of int 
    i.e. that becomes -ve value.
