Flow :
        1. Problem Statement
        2. Recall Subset Sum
        3. Why knapsack
              /   \
           0-1?   unbounded?
        4. Code Variation

-------------------------------------------------------------------------------------------------------------------------
a. Problem Statement :
        coin [] : {1,2,3},  Sum: 5
        
        Ans = 5(# of ways of coin change)
        2+3 = 5
        1+2+2 = 5
        1+1+3 = 5
        1+1+1+2 = 5
        1+1+1+1+1 = 5

-------------------------------------------------------------------------------------------------------------------------
c. why knapsack ?
            Because we have choices ki {1,,2,3} mein se 
            1 ko include karenge ya phir nahi karenge,
            2 ko include karenge ya phir nahi karenge,
            3 ko include karenge ya phir nahi karenge.

        Ekk cheez hamne seekhe hai ki 0-1 knapsack mein ki
        Wt[] and Val[] ekk hi cheez i.e. Item[] ki two properties hoti hain.

                     / Wt ar[]
            Item ar[] 
                     \ Val ar[]

        Yadi kisi Ques mein ekk hi array given hoga toh ham usko
        Wt ar[] ki tarah hi consider karenge, Val[] ko ignore kar denge.

        In this Ques: Matching 
                    ekk hi array diya hai toh isliye,
                    coin[] <---> Wt[] and 
                    Sum    <---> W 
        
    c.1 How to identify 0-1 ? or unbounded ? 
            kisi Ques mein 0-1 hai ya unbounded hai identify karne ke liye,
            ar[] mein se kisi bhi Item ko 2 baar lekar dekho,
            If      allowed => unbounded
            else    0-1

            Is Ques mein ham kisi bhi coin ko 2 baar ya us se adhik baar le sakte hain
            => unbounded

-------------------------------------------------------------------------------------------------------------------------
b. Recall Subset Sum
        ar[] = {1,2,3,5}
               /{1,2,5}    /T 
        Sum = 8            \F       count = 2
               \{3,5}

                if(ar[i-1]<=j)               (+)  
                    t[i][j]= t[i][j-ar[i-1]] || t[i-1][j];
                else
                    t[i][j] = t [i-1][j];

        Yadi Ques mein "count" ya "#of ways" paucha hai toh
        choice diagram mein ham "max/min" lene ki jagah "+" sign(summation) ka use karenge

                        O (max/min)             
                       / \                         
                      O + O                      
                     /     \                    
                    O       O                    
                   / \     / \
                  O + O   O + O 
                       \
                        O

-------------------------------------------------------------------------------------------------------------------------
d. What to change

                if(Wt[i-1]<=j)              
                    t[i][j]= max(Val[i-1] + t[i-1][j-Wt[i-1]] , t[i-1][j])
                else
                    t[i][j] = t [i-1][j];
                
                we can "remove Val[]" and instead of of max we "put +" sign.

        Initialization :
                    t[n+1][w+1] <-----> t[n+1][Sum+1]

                    for first row i.e. t[0][j]  j: 0 to Sum
                    that means Sum is given but the coin[] = {} i.e. coins aren't given
                    So, we fill the whole row with "0" Because their is no possible ways to change the coin
                    except, for t[0][0] = 1 i.e ar[]={} and Sum = 0 => { } is possible = 1 way

                    for first column i.e. t[i][0]  i: 0 to n
                    that means coin[] is given but the Sum = 0 given
                    In, this case we'll fill the whole column with "1" Because we've coins given but Sum = 0
                    So, we don't need to take any coin for Sum to be equal to 0.
                    i.e. { } is possible = 1 way 

        Code :
                if(coin[i-1]<=j)
                    t[i][j]= t[i][j-coin[i-1]] + t[i-1][j];
                else
                    t[i][j] = t [i-1][j];    

-------------------------------------------------------------------------------------------------------------------------
Coin Change : GFG
https://practice.geeksforgeeks.org/problems/coin-change2448/1#

Time = (m*n), Space = O(m*n) ; here m<->n and n<->Sum and S[]<->coin[]

class Solution
{
  public:
    long long int count( int S[], int m, int n )
    {
       long long int t[m+1][n+1];
       
       for(int i=0;i<=m;i++){
           for(int j=0;j<=n;j++){
                if(i==0)
                    t[i][j]=0;
                if(j==0)
                    t[i][j]=1;
           }
       }
       for(int i=1;i<=m;i++){
           for(int j=1;j<=n;j++){
                if(S[i-1]<=j)
                    t[i][j]= t[i][j-S[i-1]] + t[i-1][j];
                else
                    t[i][j] = t [i-1][j];
           }
       }
       
       return t[m][n];
    }
};