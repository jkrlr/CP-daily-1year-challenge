            0-1 Knapsack problem

1) Subset sum
2) Equal Sum Partition
3) Count of Subset Sum
4) Minimum Subset Sum Difference
5) Target Sum
6) # of Subset of sigma given del/f 

--------------------------------------------------------------------------------------
            Knapsack problem
            /       |       \
    Fractional     0/1     Unbounded
    Knapsack     Knapsack   Knapsack    
        / 
  (Greedy Approach)

--------------------------------------------------------------------------------------
0-1 Knapsack problem

Identify:
        1) Choice (yes -> value ke wt. ko include karo ya na karo)
        2) Optimal (yes -> max profit pacuha hai)

Hence, Proved => DP -> Recursion

DP : Recursive Soln -> Memoization -> Top-down(optional hai kro ya mat kro)
                           (DP)          (DP)

[DP = Recursion + Storage]
                  /      \
        Memoization     Top-down

--------------------------------------------------------------------------------------
How to Identify Knapsack problems?

If you have given an array of Items and 
a Capacity is given(to maximize or minimize). 
Then, problem is a version of Knapsack.

Because in Knapsack we've given an array of items(having two properties Value and Weight)
and a Bag is given for maximizing Capacity.

But in some cases it is possible that we've given only one array,
for such cases we consider that single array to be like Weight array.

